음향, 화면 체크
[슬라이드1]
안녕하십니까! 팀 택배크로스
캡스톤디자인 프로젝트 최종 발표를 시작하겠습니다.

[슬라이드2]
발표 순서는 다음과 같습니다.
(5초정도 보여줄것)

[슬라이드3]
프로젝트 주제는 "스마트 택배 보관함입니다"
조원 역할 분담은 다음과 같습니다.

[슬라이드4]
연암공대 상남숙사에서 매 학기 
택배 오배송, 오수취 사고가 발생하는 것을
여러분들도 잘 알고 계실겁니다.
더욱이, 이러한 사고는 증가 추세에 있습니다.
이는 바로 시스템의 부재 때문입니다.
저희 팀 택배 크로스는 이 점에 착안하여
중앙 관리가 되는 스마트 택배 보관함을
주제로 선정하게 되었습니다.

[슬라이드5]
web동작 구조는 아래와 같습니다.
스프링을 서버로 두고, WAS인 톰캣을 매개로
jsp구조의 프론트와 통신합니다.
프론트 부분은 부트스트랩을 사용하여
디바이스가 정해져 있지 않아도
어느정도 구조가 보장됩니다.
그리고 파이썬과 자바를 프로그래밍 언어로
채택하였습니다.
DB는 Mysql을 사용하였습니다.

[슬라이드6]
서비스 동작은 스프링 MVC 프레임워크가 제어합니다.
클라이언트인 라즈베리에서 입력된 정보를
스프링이 제어하여 DB에 저장합니다.
그리고 모바일 디바이스와 라즈베리 사이에
일어나는 임시비밀번호 발급 또한
스프링이 제어하는 구조입니다.
여기서 임시비밀번호는 택배원이 입력한
전화번호로 SMS 형태로 송신되는데,
이 서비스는 국내 SMS 서비스 업체인
쿨 SMS 서비스를 이용하였습니다.
인터페이스가 한글 친화적이라는 장점이 있습니다.
자바와 라즈베리 사이의 통신은 소켓을 이용하였습니다.

[슬라이드 7]
사용 모듈은 아래와 같습니다.
로드셀 무게센서와 hx711 모듈을 결합하고,
아크릴 형태의 원판을 위 아래에 부착하여
저울과 같은 형태로 구성했습니다.
사용자는 터치 디스플레이와 키보드로 서버에
입력을 할 수 있습니다.

[슬라이드 8]
전체적인 라즈베리 파이의 회로도는
다음과 같습니다.
(5초 정도 보여준다)

[슬라이드 9]
서비스 동작 흐름도입니다.
자바 코드로 작성된 서버와 
파이썬으로 작성된 라즈베리파이가 
소켓 통신으로 String타입의 
message값을 넣어서 정보를 주고받습니다.
이때, MVC의 컨트롤러에서
다른 소켓을 전달해야 하기 때문에
클라이언트인 라즈베리가 서버 역할을 겸합니다.

[슬라이드 10]
택배원의 서비스 이용 방식입니다.
택배원은 하드웨어의 상단부에 위치한
디스플레이에 보관 버튼을 누르고
본인의 이름, 수령인의 휴대 전화번호,
택배물의 송장번호를 입력하면
무게 모듈이 작동합니다.
이때 모듈이 택배물의 무게가 30g이 넘는것은
인식하게 되면, 잠금모듈이 해제되고
10초의 시간이 지나면 자동으로 잠금됩니다.
그리고, 수령인의 전화번호로 임시 비밀번호가
발급되게 됩니다.

[슬라이드 11]
수령인의 서비스 이용 방식입니다.
택배가 보관함에 정상적으로 보관되면,
수령인의 휴대전화에 임시 비밀번호가 발급됩니다.
그 후 수령인은 택배함의 디스플레이에
본인의 이름, 전화번호, 임시 비밀번호를 입력합니다.
이때 임시 비밀번호가 맞지 않으면 열리지 않습니다.

[슬라이드 12]
관리자의 서비스 이용 방식입니다.
관리자페이지는 인터페이스 우측 상단의 톱니바퀴를
클릭하게 되면 진입할 수 있습니다.
관리자는 이메일 형식의 아이디와 비밀번호를
입력해야 하는데, 별도의 회원가입을 지원하지 않습니다.
미리 정해진 아이디와 비밀번호가 일치하면,
관리 창에 들어갈 수 있습니다.
관리 창에는 보관된 택배와, 택배원, 송장번호가
table형태의 목록으로 표현되어있습니다.

[슬라이드 13]
다음 목차는 구현 화면입니다.
지금 보시는 이 화면이
택배 보관함의 메인 UI입니다.
택배원, 수령인, 관리자 모두 메인 페이지를
기점으로 동작합니다.

[슬라이드 14]
메인 UI에서 보관 버튼을 누르면 나오는 
택배원 전용 정보 입력 페이지 입니다.
정보를 올바르게 입력하고 확인 버튼을 누르면
스프링을 통해 자동으로 DB에 정보가 저장되고,
수령인의 전화번호로 임시비밀번호가 전송됩니다.

[슬라이드 15]
메인 UI에서 수령 버튼을 누르면 나오는
수령인 정보 입력 페이지입니다.
발급된 임시비밀번호의 값을 입력하지 않으면,
확인 버튼을 눌러도 아무 일도 일어나지 않습니다.
값이 정확하면, 잠금장치가 열려 택배를 수령할수 있습니다.

[슬라이드 16]
메인 UI에서 우측 상단 톱니바퀴를 누르면 나오는
관리자 페이지 입니다.
정해진 관리자 정보를 입력해야지만
관리 페이지로 넘어갈 수 있습니다.

[슬라이드 17]
정보를 맞게 입력하면,
다음과 같이 정상 처리된 택배들의 목록을 볼 수
있습니다.

[슬라이드 18]
라즈베리에 동작하는 파이썬 코드입니다.
본 슬라이드의 코드는 다음 슬라이드들과 연결된
하나의 파이썬 파일입니다.
좌측의 코드는 필요한 라이브러리들을 import하는 코드이고,
우측 상단은 무게 센서 셋업 코드이며
우측 하단은 sms 서비스를 이용하는데 필요한
api 인증정보를 세팅하고, 수신자와 발신자를
입력한 코드입니다.

[슬라이드 19]
좌측은 무게 센서 설정 코드이고,
우측은 server와 client간 데이터를 msg 변수로 통신하는
binder함수를 정의해 놓은 코드입니다.

[슬라이드 20]
마지막으로 소켓통신을 받을 수 있게
소켓을 생성하고 포트 번호를 설정하고 난 후
소켓 통신을 시작하는 코드입니다.
한번의 과정이 완료되면, 다음 소켓을 받을 준비를
자동으로 합니다.

[슬라이드 21]
스프링의 구조는 MVC를 사용하여 파이썬과
정보를 주고받습니다.

[슬라이드 22]
MVC에서 M과 C를 맡고있는 자바 리소스가 들어가는 
디렉토리 구조는 다음과 같습니다.
각 파일의 코드 설명은 양이 방대한 관계로 발표에서는
생략하고, 보고서에 첨부하여 제출하겠습니다.
Config 폴더에는 컨테이너 설정 정보와 
의존 정보가 포함되어 있습니다.
controller 폴더는 각 페이지에 요청이 발생하면
제어하는 자바 클래스들이 있습니다
파셀프로젝트 dao에는 parcel 테이블의 DAO가 있고,
파셀프로젝트 익셉션 폴더에서 각 페이지에서 일어나는
에러가 처리됩니다.
서비스 폴더에는 실제로 서비스가 실행되는 코드가 있고,
VO 폴더에는 보관 테이블 대응 Value Object가 있습니다

[슬라이드 23]
MVC의 V를 담당하는 디렉토리 구조입니다.
대부분 jsp파일로 이루어져 있으며
부트스트랩 라이브러리인 css와 js폴더를 제외하면
사용자에게 실제로 보여지는 부분을
각 페이지 별로 구조화해놨습니다.

[슬라이드 24]
DB에 입력되는 택배 테이블의 구조입니다
(5초 보여줘)

[슬라이드 25]
SMS 서비스 플랫폼인 coolsms의 대시보드입니다.
해외 플랫폼인 트윌리오나, aws에 비해
접근성과 가성비가 좋습니다.

[슬라이드 26]
제작된 하드웨어의 모습입니다.
캐비넷의 상단부는 디스플레이와 키보드가 위치하고
중단부에서는 택배물의 무게를 측정합니다.
하단부는 택배가 보관되고, 시건되는 부분입니다.

[슬라이드 27]
보관 시연 영상입니다.

[슬라이드 28]
이전 슬라이드에서 실시간으로 전달된 임시 비밀번호입니다.
마지막으로 배정된 값이 현재 비밀번호입니다.

[슬라이드 29]
이어지는 수령 시연 영상입니다.
(영상 시청 후)

방금 발급된 임시 비밀번호가 일치하지 않으면
페이지가 넘어가지 않고, 잠금이 해제되지 않습니다.

[슬라이드 30]
다음은 관리자 기능 영상입니다.
(영상 시청 후)

잘못된 형식이나, 아이디 패스워드가 일치하지 않으면
관리 페이지로 넘어갈 수 없습니다.

[슬라이드 31]
프로젝트 향후 보환 계획은 다음과 같습니다.
소프트웨어 부분은, 스프링에서 인터셉터를 구현하여 중복 코딩을 축소하고
프로퍼티 파일을 이용하여 다형성을 구현할 예정입니다.
하드웨어 부분은, 전력소모가 심한 무게 센서의 전력 문제를 해결하고
사용자의 서비스 이용편의성과, 직관성을 위한 모듈을 추가할 계획입니다.

[슬라이드 32]
이상으로 팀 택배크로스 발표를 마치겠습니다. 감사합니다.